<snippet>
	<content><![CDATA[
template<const long long MOD>
class Mint{
public:
	long long x;
	Mint(long long _=0) {x=norm(_);}
	long long norm(long long x)const{ x%=MOD; if(x<0) x+=MOD; return x;}
	long long val() const{return x;}
	Mint operator-()const{return Mint(norm(MOD-x));}
	Mint &operator*=(const Mint &rhs) {x=(long long)(x)*rhs.x%MOD; return *this;}
	Mint &operator+=(const Mint &rhs) {x=norm(x+rhs.x); return *this;}
	Mint &operator-=(const Mint &rhs) {x=norm(x-rhs.x); return *this;}
	template<class T> T power(T a,long long b)const{T res=1;for(;b;b>>=1,a*=a) if(b&1) res*=a;return res;}
	Mint inv() const{return power(*this,MOD-2);}
	Mint &operator/=(const Mint &rhs) {return *this*=rhs.inv();}
	friend Mint operator*(const Mint &lhs, const Mint &rhs) {Mint res = lhs; res *= rhs; return res;}
	friend Mint operator+(const Mint &lhs, const Mint &rhs) {Mint res = lhs; res += rhs; return res;}
	friend Mint operator-(const Mint &lhs, const Mint &rhs) {Mint res = lhs; res -= rhs; return res;}
	friend Mint operator/(const Mint &lhs, const Mint &rhs) {Mint res = lhs; res /= rhs; return res;}
	friend std::istream &operator>>(std::istream &is, Mint &a) {long long v; is >> v; a = Mint(v); return is;}
	friend std::ostream &operator<<(std::ostream &os, const Mint &a) {return os << a.val();}
};
using mint=Mint<998244353>;
template<const long long T>
void __print(Mint<T> x) {cerr << x.val();}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>!mint</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
